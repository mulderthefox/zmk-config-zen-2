#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    //zmk,matrix_transform = &five_column_transform;
  };
};

#define QWERTY 0
#define NUMPAD 1
#define SYMBOL 2
#define ARROWS 3
#define GAMING 4

#define U_PSTE RS(LC(V))

&mt {
    tapping-term-ms = <250>;
    flavor = "tap-preferred";
};

/ {

/*      
 *       BEHAVIORS                      =====================================================================
 */

      behaviors {   

/*       Right Hand Layer Toggles       -------------------------------------
 *
 *       QWERTY LAYER   
 *
 *       Usage: &td_RT_QWE
 *       Hold: Momentary NUMPAD Layer
 *       Double Tap: Toggle NUMPAD Layer
 *       Tripple Tap: Toggle ARROWS Layer
 */

         td_RT_QWE: tap_dance_0 {    
               compatible = "zmk,behavior-tap-dance";  
               label = "TAP_DANCE_RT_QWERTY";   
               #binding-cells = <0>;    
               tapping-term-ms = <300>;    
               bindings = <&mo ARROWS>, <&tog NUMPAD>, <&tog ARROWS>; 
               };
 
/*       NUMPAD LAYER   
 *
 *       Usage: &td_RT_NUM
 *       Hold: Momentary QWERTY Layer
 *       Double Tap: Toggle ARROWS Layer
 */        

         td_RT_NUM: tap_dance_1 {    
               compatible = "zmk,behavior-tap-dance";  
               label = "TAP_DANCE_RT_NUMPAD";   
               #binding-cells = <0>;    
               tapping-term-ms = <300>;    
               bindings = <&mo NUMPAD>, <&tog NUMPAD>; 
               };
 

/*       Left Hand Layer Toggles       -------------------------------------
 *
 *       QWERTY LAYER   
 *
 *       Usage: &td_LT_QWE
 *       Hold: Momentary NUMPAD Layer
 *       Double Tap: Toggle ARROWS Layer
 */

         td_LT_QWE: tap_dance_2 {    
               compatible = "zmk,behavior-tap-dance";  
               label = "TAP_DANCE_LT_QWERTY";   
               #binding-cells = <0>;    
               tapping-term-ms = <300>;    
               bindings = <&mo SYMBOL>, <&tog ARROWS>; 
               };
 
/*       NUMPAD LAYER   
 *
 *       Usage: &td_LT_NUM
 *       Hold: Momentary QWERTY Layer
 *       Double Tap: Toggle QWERTY Layer
 */        

         td_LT_NUM: tap_dance_3 {    
               compatible = "zmk,behavior-tap-dance";  
               label = "TAP_DANCE_LT_NUMPAD";   
               #binding-cells = <0>;    
               tapping-term-ms = <300>;    
               bindings = <&mo QWERTY>, <&tog QWERTY>; 
               };
 

/*       Left SHIFT Key                   -------------------------------------
 *
 *       Usage: &td_shift
 *       Hold: SHIFT
 *       Double Tap: Caps Lock
 *       Tripple Tap: Caps Word
 */

         td_shift: tap_dance_4 {
              compatible = "zmk,behavior-tap-dance";
              label = "TAP_DANCE_SHIFT";
              #binding-cells = <0>;
              tapping-term-ms = <300>;
              bindings = <&kp LSHFT>, <&kp CAPSLOCK>, <&caps_word>;
         };

/*
 *       Tab Esc Win                     -------------------------------------
 *
 *       Usage: &td_tab
 *       Hold: Control
 *       Double Tap: Alt+Tab
 */

         td_tab: tap_dance_5 {
              compatible = "zmk,behavior-tap-dance";
              label = "TAP_DANCE_TAB";
              #binding-cells = <0>;
              tapping-term-ms = <300>;
              bindings = <&kp TAB>, <&kp LWIN>, <&kp ESC>;
         };         

/*
 *       Control and Alt Tab                     -------------------------------------
 *
 *       Usage: &td_ctrl
 *       Hold: Control
 *       Double Tap: Alt+Tab
 */

         td_ctrl: tap_dance_6 {
              compatible = "zmk,behavior-tap-dance";
              label = "TAP_DANCE_CONTROL";
              #binding-cells = <0>;
              tapping-term-ms = <300>;
              bindings = <&kp LCTRL>, <&kp LA(TAB)>, <&mac_split>;
         };  

/*
 *       Backspace                     -------------------------------------
 *
 *       Usage: &td_backspace
 *       Hold: Backspace
 *       Double Backspace
 *       Tripple Tap: Ctrl + Backspace
 */

         td_backspace: tap_dance_7 {
              compatible = "zmk,behavior-tap-dance";
              label = "TAP_DANCE_BACKSPACE";
              #binding-cells = <0>;
              tapping-term-ms = <100>;
              bindings = <&kp BSPC>, <&mac_db>, <&kp LC(BSPC)>;
         };  

/*
 *       Semicolon                     -------------------------------------
 *
 *       Usage: &td_comma
 *       Hold: Comma
 *       Double Ctrl + COMMA
 */

         td_comma: tap_dance_8 {
              compatible = "zmk,behavior-tap-dance";
              label = "TAP_DANCE_COMMA";
              #binding-cells = <0>;
              tapping-term-ms = <300>;
              bindings = <&kp COMMA>, <&kp LC(COMMA)>;
         };  

/*
 *       double zero hold tap                     -------------------------------------
 *
 *       Usage: &ht0 LC(V) 0
 */

         ht0: holdtap0 {
               compatible = "zmk,behavior-hold-tap";
               label = "HT_ZERO";
               #binding-cells = <2>;
               tapping-term-ms = <200>; 
               quick-tap-ms = <0>;
               flavor = "tap-preferred";
               bindings = <&kp>, <&mac_dz>;
         };


/*
 *       slipt screen hold tap                     -------------------------------------
 *
 *       Usage: &ht1 0 APOSTROPHE
 */

         ht1: holdtap1 {
               compatible = "zmk,behavior-hold-tap";
               label = "HT_SPLIT";
               #binding-cells = <2>;
               tapping-term-ms = <200>; 
               quick-tap-ms = <0>;
               flavor = "tap-preferred";
               bindings = <&mac_split>, <&kp>;
         };

/*
 *       slipt screen hold tap                     -------------------------------------
 *
 *       Usage: &ht3 LC(V) 0 
 */

         ht3: holdtap3 {
               compatible = "zmk,behavior-hold-tap";
               label = "HT_GST";
               #binding-cells = <2>;
               tapping-term-ms = <200>; 
               quick-tap-ms = <0>;
               flavor = "tap-preferred";
               bindings = <&kp>, <&mac_gst>;
         };



      };

/*      
 *       MACROS                           =====================================================================
 */

macros { 

/*       
 *       Double Zero   
 *
 *       Usage: &mac_dz
 */

        mac_dz: mac_doublezero {
            label = "MAC_DOUBLEZERO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <10>;
            bindings
                = <&macro_tap &kp N0 &kp N0>;
        };

/*       
 *       Double Backspace   
 *
 *       Usage: &mac_db
 */

        mac_db: mac_doubleback {
            label = "MAC_DOUBLEBACK";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <10>;
            bindings
                = <&macro_tap &kp BSPC &kp BSPC>;
        };

/*       
 *       Split Screen   
 *
 *       Usage: &mac_split
 *
 */
        mac_split: mac_splitscreen {
            label = "MAC_SPLITSCREEN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                 = <&macro_tap &kp LG(LEFT_ARROW)>
                 , <&macro_wait_time 500>
                 , <&macro_tap &kp LA(TAB)>
                 , <&macro_wait_time 500>
                 , <&macro_tap &kp LG(RIGHT_ARROW)>
                 ;
        };
    
/*       
 *       GST   
 *
 *       Usage: &mac_gst
 */

        mac_gst: mac_geest {
            label = "MAC_GST";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp TAB &kp G &kp S &kp T &kp TAB &kp KP_N1 &kp TAB>;
        };

/*       
 *       xeroGST   
 *
 *       Usage: &mac_xeroGST
 */

        mac_xeroGST: mac_xeroogst {
            label = "MAC_XEROGST";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LC(A) &kp LC(C) &kp TAB &kp G &kp S &kp T &kp TAB &kp KP_N1 &kp TAB &kp LC(V) &kp LS(TAB) &kp LS(TAB) &kp LS(TAB) &kp LS(TAB) &kp LS(TAB) &kp LS(TAB) &kp LS(TAB) &kp END &kp MINUS &kp LC(V) &kp TAB >;
        };

/*       
 *       Alt Codes   
 */

        mac_Comma: mac_comma {
            label = "MAC_COMMA";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LEFT_ALT &kp KP_N6>;
        };

        mac_pasteVlu: mac_pastevlu {
            label = "MAC_PSTVLU";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LEFT_ALT &kp KP_N9 &kp V>;
        };

};

combos {
      compatible = "zmk,combos";
      
      // Left-hand combos

        combo_clrfilter {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp KP_N9 &kp KP_N9 &kp KP_N1>;
        };

        combo_reffilter {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp LEFT_ALT &kp KP_N2>;
        }; 

        combo_comma {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&mac_Comma>;
        }; 

        combo_pstvlu {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&mac_pasteVlu>;
        };

        combo_xeroGST {
            timeout-ms = <50>;
            key-positions = <14 15 16>;
            bindings = <&mac_xeroGST>;
        }; 

      // Right-hand combos

    };

/*       
 *      KEYMAP                            =====================================================================
 *      &kp - normal key press
 *      &mt - long key press, normal key press
 *      &td - tap dance - defined above (double tap, tripple tap, etc)
 *      &lt - layer tap - 
 */

        keymap {
                compatible = "zmk,keymap";

                qwerty_layer {
                        label = "QWERTY";
                        bindings = <
   &kp TAB        &mt QMARK Q    &mt AT W       &mt LPAR E        &mt RPAR R        &mt HASH T                                  &kp Y      &kp U       &mt PAGE_UP I        &kp O        &kp P       &td_backspace
   &td_ctrl       &kp A          &mt LC(S) S    &mt LC(C) D       &mt LC(V) F       &mt LC(KP_PLUS) G                           &kp H      &mt HOME J  &mt PAGE_DOWN K      &mt END L    &kp SEMI    &kp APOSTROPHE 
   &td_shift      &mt LC(Z) Z    &mt LC(X) X    &mt LBRC C        &mt RBRC V        &mt TILDE  B                                &kp N      &kp M       &td_comma            &kp DOT      &kp RALT    &kp KP_ENTER
                                                &mt LWIN DEL      &td_LT_QWE        &lt NUMPAD SPACE                            &lt NUMPAD SPACE       &td_RT_QWE           &lt ARROWS TAB

                        >;
                };

                numpad_layer {
                        label = "NUMPAD";
                        bindings = <
   &td_backspace         &kp KP_MULTIPLY    &mt AT KP_N7     &mt LPAR KP_N8    &mt RPAR KP_N9     &mt RA(EQUAL) MINUS          &mt UNDER MINUS     &kp KP_N7         &mt PAGE_UP KP_N8      &kp KP_N9       &kp KP_MULTIPLY          &td_backspace
   &mt RA(EQUAL) EQUAL   &kp KP_SLASH       &mt LC(S) KP_N4  &mt LC(C) KP_N5   &mt LC(V) KP_N6    &mt LC(KP_PLUS) KP_PLUS      &kp KP_PLUS         &mt HOME KP_N4    &mt PAGE_DOWN KP_N5    &mt END KP_N6   &mt BACKSLASH KP_SLASH   &kp DEL 
   &kp KP_ENTER          &kp DEL            &mt LC(X) KP_N1  &mt LBRC KP_N2    &mt LBRC KP_N3     &mt LC(LS(DOWN)) DOT         &kp DOT             &kp KP_N1         &kp KP_N2              &kp KP_N3       &mt RA(EQUAL) TAB        &mt RA(EQUAL) EQUAL
                                                             &kp KP_N0         &lt ARROWS NUMPAD  &kp SPACE                    &kp SPACE           &td_RT_NUM        &kp KP_N0

                        >;
                };

                symbol_layer {
                        label = "SYMBOL";
                        bindings = <
   &kp ESC        &mt QMARK EXCL    &mt AT PIPE     &mt LPAR LBKT    &mt RPAR RBKT     &mt GRAVE PIPE                       &none   &kp F7    &kp F8   &kp F9   &none    &none
   &td_ctrl       &mt LC(A) AMPS    &mt LC(S) DLLR  &kp PRCNT        &kp DLLR          &mt LC(KP_PLUS) F4                   &none   &kp F4    &kp F5   &kp F6   &none    &none 
   &kp KP_ENTER   &mt LC(Z) TILDE   &mt LC(X) PRCNT &mt LBRC LT      &mt LBRC GT       &mt LC(LS(DOWN)) F8                  &none   &kp F1    &kp F2   &kp F3   &none    &none
                                                    &kp DEL          &tog NUMPAD       &kp SPACE                            &none   &td_RT_NUM   &kp KP_N0

                        >;
                };

                arrows_layer {
                        label = "ARROWS";
                        bindings = <
   &bt BT_SEL 0   &none   &none       &kp UP       &none         &none                                                          &tog GAMING   &none         &kp UP      &none       &none   &bt BT_SEL 3
   &bt BT_SEL 1   &none   &kp LEFT    &kp DOWN     &kp RIGHT     &none                                                          &none         &kp LEFT      &kp DOWN    &kp RIGHT   &none   &bt BT_SEL 4
   &bt BT_SEL 2   &none   &none       &none        &none         &none                                                          &none         &none         &none       &none       &none   &bt BT_SEL 5
                                      &bt BT_CLR   &tog ARROWS   &kp SPACE                                                      &kp SPACE  &tog ARROWS   &none         
                        >;
                };

               gaming_layer {
                        label = "GAMING";
                        bindings = <
   &kp TAB      &kp Q    &kp W    &kp E    &kp R    &kp T                                                                       &tog GAMING   &none         &kp UP      &none      &none    &td_backspace
   &kp LCTRL    &kp A    &kp S    &kp D    &kp F    &kp G                                                                       &none         &kp LEFT      &kp DOWN   &kp RIGHT   &none    &none 
   &kp LSHIFT   &kp Z    &kp X    &kp C    &kp V    &kp B                                                                       &none         &none         &none      &none       &none    &none
                     &tog QWERTY    &mo SYMBOL      &kp SPACE                                                                   &to QWERTY    &td_RT_QWE           &lt ARROWS TAB

                        >;
                };
        };
};